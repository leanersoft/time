import{u,b as h}from"./main-D9O-0MtM.js";import{createSettingsBackup as b}from"./settings-backup-D_tuVzAd.js";function f(o){const e={settings:{categories:[]}},a=o.split(`
`).filter(i=>!i.trim().startsWith("#")&&i.trim());let s=null,r=!1,n=!1;for(const i of a){const t=i.trim();if(t.startsWith("timeRounding:")){const l=t.split(":")[1]?.trim();e.settings.timeRounding=l==="null"?null:parseInt(l)||null}else if(t.startsWith("durationThreshold:")){const l=t.split(":")[1]?.trim();e.settings.durationThreshold=parseInt(l)||150}else if(t.startsWith("defaultExportPath:")){const l=t.split(":")[1]?.trim();e.settings.defaultExportPath=l?.replace(/"/g,"")||void 0}else if(t==="categories:")r=!0;else if(r&&t.startsWith("- id:"))s&&e.settings.categories.push(s),s={id:t.split(":")[1]?.trim().replace(/"/g,"")||"",subcategories:[]},n=!1;else if(s&&t.startsWith("label:"))s.label=t.split(":")[1]?.trim().replace(/"/g,"")||"";else if(s&&t.startsWith("icon:"))s.icon=t.split(":")[1]?.trim().replace(/"/g,"")||"";else if(s&&t.startsWith("color:"))s.color=t.split(":")[1]?.trim().replace(/"/g,"")||"";else if(s&&t==="subcategories:")n=!0;else if(n&&t.startsWith("- ")){const l=t.substring(2).trim().replace(/"/g,"");l&&s.subcategories.push(l)}}return s&&e.settings.categories.push(s),e}function g(o){const e={settings:{categories:[]}},a=o.split(`
`).filter(n=>!n.trim().startsWith("#")&&n.trim());let s=!1,r=null;for(const n of a){const i=n.trim();if(i==="[settings]")s=!0;else if(i==="[[categories]]")r&&e.settings.categories.push(r),r={subcategories:[]},s=!1;else if(s){if(i.startsWith("timeRounding =")){const t=i.split("=")[1]?.trim();e.settings.timeRounding=t==="0"?null:parseInt(t)||null}else if(i.startsWith("durationThreshold =")){const t=i.split("=")[1]?.trim();e.settings.durationThreshold=parseInt(t)||150}else if(i.startsWith("defaultExportPath =")){const t=i.split("=")[1]?.trim();e.settings.defaultExportPath=t?.replace(/"/g,"")||void 0}}else if(r){if(i.startsWith("id ="))r.id=i.split("=")[1]?.trim().replace(/"/g,"")||"";else if(i.startsWith("label ="))r.label=i.split("=")[1]?.trim().replace(/"/g,"")||"";else if(i.startsWith("icon ="))r.icon=i.split("=")[1]?.trim().replace(/"/g,"")||"";else if(i.startsWith("color ="))r.color=i.split("=")[1]?.trim().replace(/"/g,"")||"";else if(i.startsWith("subcategories =")){const t=i.split("=")[1]?.trim();if(t&&t!=="[]"){const l=t.replace(/^\[|\]$/g,"").split(",").map(c=>c.trim().replace(/"/g,"")).filter(c=>c);r.subcategories=l}}}}return r&&e.settings.categories.push(r),e}function p(o){try{const e=JSON.parse(o);if(e.settings)return e;if(e.timeRounding!==void 0||e.categories)return{settings:e};throw new Error("Invalid JSON format: missing settings data")}catch(e){throw h.parseError(`JSON parsing failed: ${e instanceof Error?e.message:"Unknown error"}`)}}function m(o,e){const a=o.split(".").pop()?.toLowerCase();return a==="json"?"json":a==="yaml"||a==="yml"?"yaml":a==="toml"?"toml":e.trim().startsWith("{")&&e.trim().endsWith("}")?"json":e.includes("timeRounding:")&&e.includes("categories:")?"yaml":e.includes("[settings]")||e.includes("[[categories]]")?"toml":"unknown"}function d(o){const e=[],a=[];return o?(o.timeRounding!==null&&o.timeRounding!==void 0&&(typeof o.timeRounding!="number"||o.timeRounding<0)&&e.push("timeRounding must be a positive number or null"),o.durationThreshold!==void 0&&(typeof o.durationThreshold!="number"||o.durationThreshold<0)&&e.push("durationThreshold must be a positive number"),o.categories&&Array.isArray(o.categories)?o.categories.forEach((s,r)=>{(!s.id||typeof s.id!="string")&&e.push(`Category ${r+1}: id is required and must be a string`),(!s.label||typeof s.label!="string")&&e.push(`Category ${r+1}: label is required and must be a string`),(!s.icon||typeof s.icon!="string")&&a.push(`Category ${r+1}: icon is missing or invalid`),(!s.color||typeof s.color!="string")&&a.push(`Category ${r+1}: color is missing or invalid`),s.subcategories&&!Array.isArray(s.subcategories)&&a.push(`Category ${r+1}: subcategories must be an array`)}):o.categories!==void 0&&e.push("categories must be an array"),{isValid:e.length===0,errors:e,warnings:a}):(e.push("Settings object is missing"),{isValid:!1,errors:e,warnings:a})}async function S(o,e,a="replace"){try{const s=m(o,e);if(s==="unknown")return{success:!1,message:"Unable to detect file format. Supported formats: JSON, YAML, TOML",errors:["Unknown file format"]};let r;try{switch(s){case"json":r=p(e);break;case"yaml":r=f(e);break;case"toml":r=g(e);break;default:throw new Error(`Unsupported format: ${s}`)}}catch(t){return{success:!1,message:`Failed to parse ${s.toUpperCase()} file: ${t instanceof Error?t.message:"Unknown error"}`,errors:[t instanceof Error?t.message:"Parse error"]}}if(!r.settings)return{success:!1,message:"Invalid file format: settings section not found",errors:["Missing settings section"]};const n=d(r.settings);if(!n.isValid)return{success:!1,message:"Settings validation failed",errors:n.errors,warnings:n.warnings};const i={timeRounding:r.settings.timeRounding,durationThreshold:r.settings.durationThreshold,categories:r.settings.categories,defaultExportPath:r.settings.defaultExportPath};Object.keys(i).forEach(t=>{i[t]===void 0&&delete i[t]});try{const t=localStorage.getItem("appSettings");if(t){const l=JSON.parse(t),c=`Before importing ${s.toUpperCase()} settings`;b(l,c,"import")}}catch(t){console.warn("Failed to create backup before import:",t)}if(a==="replace"){if(!u(i))throw new Error("Failed to save settings to localStorage")}else if(!u(i))throw new Error("Failed to merge settings to localStorage");return{success:!0,message:`Settings successfully imported from ${s.toUpperCase()} file`,settingsImported:i,warnings:n.warnings.length>0?n.warnings:void 0}}catch(s){return console.error("Settings import failed:",s),{success:!1,message:"Import operation failed due to an unexpected error",errors:["Unexpected error during import"]}}}async function y(o,e){try{const a=m(o,e);if(a==="unknown")return{success:!1,message:"Unable to detect file format"};let s;switch(a){case"json":s=p(e);break;case"yaml":s=f(e);break;case"toml":s=g(e);break}const r=d(s?.settings);return{success:!0,preview:s?.settings,format:a.toUpperCase(),validation:r,message:`Successfully parsed ${a.toUpperCase()} file`}}catch(a){return console.error("Settings preview failed:",a),{success:!1,message:"Preview operation failed"}}}export{m as detectFormat,S as importSettings,y as previewSettings};
