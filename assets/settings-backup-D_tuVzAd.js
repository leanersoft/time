const a="settingsBackups";function c(){try{const e=localStorage.getItem(a);return e?JSON.parse(e).map(t=>({...t,timestamp:new Date(t.timestamp)})):[]}catch(e){return console.error("Failed to load settings backups:",e),[]}}function i(e,r,t="manual"){try{const s=c(),n={id:crypto.randomUUID(),timestamp:new Date,description:r,settings:{durationThreshold:e.durationThreshold,timeRounding:e.timeRounding,categories:JSON.parse(JSON.stringify(e.categories||[])),currentPreset:e.currentPreset,defaultExportPath:e.defaultExportPath},version:"2.0",source:t};s.unshift(n);const o=s.slice(0,3);return localStorage.setItem(a,JSON.stringify(o)),console.log(`Settings backup created: ${r}`),!0}catch(s){return console.error("Failed to create settings backup:",s),!1}}function u(e){try{const t=c().find(o=>o.id===e);if(!t)return{success:!1,message:"Backup not found"};const s=localStorage.getItem("appSettings");if(s){const o=JSON.parse(s);i(o,`Before restoring to: ${t.description}`,"manual")}const n={durationThreshold:t.settings.durationThreshold,timeRounding:t.settings.timeRounding,categories:t.settings.categories,currentPreset:t.settings.currentPreset,defaultExportPath:t.settings.defaultExportPath,savedAt:new Date().toISOString()};return localStorage.setItem("appSettings",JSON.stringify(n)),{success:!0,backup:t,message:`Settings restored from: ${t.description}`}}catch(r){return console.error("Failed to restore from backup:",r),{success:!1,message:"Failed to restore settings from backup"}}}function l(e){try{const t=c().filter(s=>s.id!==e);return localStorage.setItem(a,JSON.stringify(t)),!0}catch(r){return console.error("Failed to delete backup:",r),!1}}function p(){try{return localStorage.removeItem(a),!0}catch(e){return console.error("Failed to clear backups:",e),!1}}export{p as clearAllBackups,i as createSettingsBackup,l as deleteBackup,c as getSettingsBackups,u as restoreFromBackup};
